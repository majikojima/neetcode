from typing import List

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        one = 1
        i = 0
        digits = digits[::-1]
        while one:
            if i < len(digits):
                if digits[i] == 9:
                    digits[i] = 0
                else:
                    digits[i] += 1
                    one = 0
            else:
                digits.append(one)
                one = 0
            i += 1
        
        return digits[::-1]


s = Solution()
n = [1,2,3]
result = s.plusOne(n)
print(result)

n = [9,9,9]
result = s.plusOne(n)
print(result)

"""
このコードは、与えられた数のリスト形式の数字（例：[1,2,3] は 123）に1を加えるためのものです。つまり、[1,2,3] を与えると、出力は [1,2,4] になります。

### コードの説明:

1. **初期設定**:
   - `one = 1`: 追加する値（1）を指定します。
   - `i = 0`: インデックスの初期値を設定します。
   - `digits = digits[::-1]`: `digits`リストを逆順にします。これにより、最も下位の数字（最後の要素）から始めて計算を行うことができ、桁上げを簡単に扱うことができます。

2. **whileループ**:
   - `while one:`: 1を加える操作が完了するまでループを続けます。もし桁上げがなければ、ループは1回の実行で終了します。

3. **if文**:
   - `if i < len(digits):`: 現在のインデックスが`digits`の長さ未満の場合、以下の操作を実行します。
     - `if digits[i] == 9:`: インデックスiの数字が9の場合、桁上げを行い、現在の数字を0に設定します。
     - `else:`: インデックスiの数字が9以外の場合、1を加えて`one`を0に設定します。これにより、ループは次のイテレーションで終了します。
   - `else:`: インデックスが`digits`の長さを超えた場合（すなわち、すべての数字をチェックした後）、新しい桁を追加して`one`を0に設定します。

4. `i += 1`: インデックスを1増加させ、次の数字をチェックします。

5. **最終的な結果**:
   - `return digits[::-1]`: 計算が終了した後、`digits`リストを再び逆順にして正しい順序で返します。

このコードのポイントは、数字のリストを逆順にすることで、加算と桁上げの処理を簡単に行っている点にあります。
"""

"""
このようなアルゴリズムを設計するためには、以下のようなステップを踏むことが一般的です：

1. **問題理解**: 問題の全ての側面を理解し、どのような結果が求められているのかを明確にします。この例では、リストに格納された数値に1を加えることが目的となります。

2. **問題分解**: 問題を小さな部分に分解し、個々の部分がどのように解決可能であるかを見ます。この例では、最初にリストを反転させ、次に各桁に1を追加し、必要に応じて繰り上がりを処理するという手順が必要です。

3. **アルゴリズム設計**: 問題を解決するための手順（アルゴリズム）を設計します。このステップでは、ループ、条件分岐、変数の使用など、必要なプログラミング概念を利用してアルゴリズムを設計します。

4. **コーディング**: 設計したアルゴリズムをコードに変換します。

5. **テストとデバッグ**: コードをテストして動作を確認し、問題があれば修正（デバッグ）します。

このプロセスを通じて、基本的なプログラミングスキルや、問題解決スキルを磨くことができます。また、より高度なアルゴリズムを理解し設計するためには、データ構造やアルゴリズムについての深い理解が求められます。これらはコンピューターサイエンスのカリキュラムや専門書籍、オンラインコースを通じて学ぶことができます。
"""