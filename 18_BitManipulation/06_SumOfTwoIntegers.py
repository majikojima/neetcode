class Solution:
    def getSum(self, a: int, b: int) -> int:
        def add(a, b):
            if not a or not b:
                return a or b
            return add(a ^ b, (a & b) << 1)

        if a * b < 0:  # assume a < 0, b > 0
            if a > 0:
                return self.getSum(b, a)
            if add(~a, 1) == b:  # -a == b
                return 0
            if add(~a, 1) < b:  # -a < b
                return add(~add(add(~a, 1), add(~b, 1)), 1)  # -add(-a, -b)

        return add(a, b)  # a*b >= 0 or (-a) > b > 0

S = Solution()

a = 1
b = 2
print(S.getSum(a, b))

a = 2
b = 3
print(S.getSum(a, b))

"""
このコードは、2つの整数`a`と`b`の合計を返す関数`getSum`を定義しています。通常の算術演算子（+や-）を使用せずに、ビット演算を利用して2つの数値を加算しています。

大まかな説明:
この関数は、ビット演算を使用して、2つの整数の加算を試みます。`a`または`b`のどちらかが負の場合にも対応しています。特定の条件に基づいて、関数内で再帰的に他の計算や補助関数`add`の呼び出しを行います。

部分毎の説明:

1. `def add(a, b):`
   - `a`と`b`の加算を補助するヘルパー関数です。
   
2. `if not a or not b:`
   - どちらかの数が0の場合、0でない方の数を返します。

3. `return add(a ^ b, (a & b) << 1)`
   - XOR (`^`)を使用して、aとbの加算を試みますが、キャリー（桁上げ）は考慮しません。
   - AND (`&`)および左シフト (`<<`)を使用して、キャリーを計算します。
   - これらの2つの結果を再帰的に加算して、最終的な合計を得るためにキャリーを考慮します。

4. `if a * b < 0:`
   - これは、`a`と`b`のどちらかが負で、もう一方が正の場合を判断します。

5. `if a > 0:`
   - `a`が正で`b`が負の場合、その位置を入れ替えて`getSum`を再帰的に呼び出します。

6. `if add(~a, 1) == b:`
   - `a`の補数を取り、1を加算することで-aを得ることができます。これが`b`と等しい場合、合計は0になります。

7. `if add(~a, 1) < b:`
   - -aがbより小さい場合、負の数同士を加算します。

8. `return add(a, b):`
   - どちらの数も正、またはどちらも負、または-aがbより大きい場合には、直接`add`関数を使用して2つの数を加算します。

この関数は、特に算術演算子を避ける必要がある場合や、ビット演算の動作を理解するための学習ツールとして役立ちます。
"""